# Pin specific version for stability
# Use separate stage for building image
# Use debian for easier build utilities
FROM golang:1.23-alpine AS build

# Install git to fetch dependencies
RUN apk add --no-cache git

WORKDIR /app

# Copy only files required to install dependencies (better layer caching)
COPY go.mod go.sum ./

# Tidy up and download dependencies
RUN --mount=type=cache,target=/go/pkg/mod \
  --mount=type=cache,target=/root/.cache/go-build \
  go mod tidy && go mod download

# Copy the rest of the application to /app
COPY . .

# Build dev version of the image
FROM golang:1.23-alpine AS dev

# Install air for hot reload & delve for debugging
RUN apk add --no-cache git \
    && go install github.com/air-verse/air@latest \
    && go install github.com/go-delve/delve/cmd/dlv@latest

WORKDIR /app
COPY --from=build /app .

CMD ["air", "-c", ".air.toml"]

# Build production version of the image
FROM golang:1.23-alpine AS build-production

# Add non-root user
RUN adduser -D -u 1001 nonroot

WORKDIR /app
COPY --from=build /app .

# Kontrollera att `healthcheck`-katalogen och filerna finns
RUN ls /app/healthcheck

# Compile healthcheck
RUN go build \
  -ldflags="-linkmode external -extldflags -static" \
  -tags netgo \
  -o healthcheck \
  ./healthcheck/healthcheck.go

# Compile the main application
RUN go build \
  -ldflags="-linkmode external -extldflags -static" \
  -tags netgo \
  -o api-golang

# Use a minimal image for deployment
FROM scratch

# Set gin mode
ENV GIN_MODE=release

WORKDIR /

# Copy the passwd file
COPY --from=build-production /etc/passwd /etc/passwd

# Copy healthcheck and the application
COPY --from=build-production /app/healthcheck/healthcheck healthcheck
COPY --from=build-production /app/api-golang api-golang

# Use non-root user
USER nonroot

# Specify the port the application will use
EXPOSE 8080

CMD ["/api-golang"]
