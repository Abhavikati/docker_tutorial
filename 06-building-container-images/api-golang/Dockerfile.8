# Pin specific version for stability
# Use separate stage for building image
# Use debian for easier build utilities
FROM golang:1.23-alpine AS build

WORKDIR /app 

# Copy only files required to install dependencies (better layer caching)
COPY go.mod go.sum ./

# Use cache mount to speed up install of existing dependencies
RUN --mount=type=cache,target=/go/pkg/mod \
  --mount=type=cache,target=/root/.cache/go-build \
  go mod download

# Kopiera resten av koden till /app
COPY . .

# Skapa dev versionen av bilden
FROM golang:1.23-alpine AS dev

# Installera air för hot reload & delve för debugging
RUN go install github.com/air-verse/air@latest && \
    go install github.com/go-delve/delve/cmd/dlv@latest

WORKDIR /app
COPY --from=build /app .

CMD ["air", "-c", ".air.toml"]

# Skapa production version av bilden
FROM golang:1.23-alpine AS build-production

# Lägg till non-root user
RUN adduser -D -u 1001 nonroot

WORKDIR /app
COPY --from=build /app .

# Kompilera healthcheck
RUN go build \
  -ldflags="-linkmode external -extldflags -static" \
  -tags netgo \
  -o healthcheck \
  ./healthcheck/healthcheck.go

# Kompilera huvudapplikationen
RUN go build \
  -ldflags="-linkmode external -extldflags -static" \
  -tags netgo \
  -o api-golang

# Använd en minimal bild för deployment
FROM scratch

# Set gin mode
ENV GIN_MODE=release

WORKDIR /

# Kopiera passwd filen
COPY --from=build-production /etc/passwd /etc/passwd

# Kopiera healthcheck och applikationen
COPY --from=build-production /app/healthcheck/healthcheck healthcheck
COPY --from=build-production /app/api-golang api-golang

# Använd non-root användare
USER nonroot

# Ange porten som applikationen ska använda
EXPOSE 8080

CMD ["/api-golang"]
