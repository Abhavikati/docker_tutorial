# Använd specifik version för stabilitet
# Bygg en separat stage för att bygga bilden
FROM golang:1.23-alpine AS build

# Installera git för att kunna hämta beroenden
RUN apk add --no-cache git

WORKDIR /app 

# Kopiera go.mod och go.sum för att installera beroenden (bättre caching)
COPY go.mod go.sum ./

# Använd cache mount för att snabba upp installation av existerande beroenden
RUN --mount=type=cache,target=/go/pkg/mod \
  --mount=type=cache,target=/root/.cache/go-build \
  go mod tidy && go mod download

# Kopiera resten av applikationen till /app
COPY . .

# Bygg dev version av bilden
FROM golang:1.23-alpine AS dev

# Installera Git och verktyg för utveckling
RUN apk add --no-cache git \
    && go install github.com/air-verse/air@latest \
    && go install github.com/go-delve/delve/cmd/dlv@latest

WORKDIR /app
COPY --from=build /app .

CMD ["air", "-c", ".air.toml"]

# Bygg produktionsversion av bilden
FROM golang:1.23-alpine AS build-production

# Lägg till en användare som inte är root
RUN adduser -D -u 1001 nonroot

WORKDIR /app
COPY --from=build /app .

# Kompilera healthcheck
RUN go build \
  -ldflags="-linkmode external -extldflags -static" \
  -tags netgo \
  -o healthcheck \
  ./healthcheck/healthcheck.go

# Kompilera huvudapplikationen
RUN go build \
  -ldflags="-linkmode external -extldflags -static" \
  -tags netgo \
  -o api-golang

# Använd en minimal bild för distribution
FROM scratch

# Sätt gin-läge
ENV GIN_MODE=release

WORKDIR /

# Kopiera passwd-filen
COPY --from=build-production /etc/passwd /etc/passwd

# Kopiera healthcheck och applikationen
COPY --from=build-production /app/healthcheck/healthcheck healthcheck
COPY --from=build-production /app/api-golang api-golang

# Använd en användare som inte är root
USER nonroot

# Ange vilken port applikationen använder
EXPOSE 8080

CMD ["/api-golang"]
